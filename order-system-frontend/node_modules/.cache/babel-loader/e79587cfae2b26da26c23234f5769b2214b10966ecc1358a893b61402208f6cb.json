{"ast":null,"code":"import \"core-js/modules/esnext.iterator.constructor.js\";\nimport \"core-js/modules/esnext.iterator.some.js\";\nimport Vue from 'vue';\nimport Router from 'vue-router';\nimport LoginPage from './components/LoginPage.vue';\nimport SignUpPage from './components/SignUpPage.vue';\nimport MainPage from './components/MainPage.vue';\nVue.use(Router);\nconst routes = [{\n  path: '/',\n  name: 'login',\n  component: LoginPage\n}, {\n  path: '/signup',\n  name: 'signup',\n  component: SignUpPage\n}, {\n  path: '/main',\n  name: 'main',\n  component: MainPage,\n  meta: {\n    requiresAuth: true\n  } // To require authentication for MainPage\n}];\nconst router = new Router({\n  routes\n});\n\n// Global route guard to check if the user is authenticated\nrouter.beforeEach((to, from, next) => {\n  const token = localStorage.getItem('token');\n  if (to.matched.some(record => record.meta.requiresAuth) && !token) {\n    // Redirect to login if the route requires auth but the user is not authenticated\n    next({\n      name: 'login'\n    });\n  } else {\n    next(); // Proceed to the route\n  }\n});\nexport default router;","map":{"version":3,"names":["Vue","Router","LoginPage","SignUpPage","MainPage","use","routes","path","name","component","meta","requiresAuth","router","beforeEach","to","from","next","token","localStorage","getItem","matched","some","record"],"sources":["/home/it2021154/Desktop/QNR_OrderSystem/order-system-frontend/src/router.js"],"sourcesContent":["import Vue from 'vue';\nimport Router from 'vue-router';\nimport LoginPage from './components/LoginPage.vue';\nimport SignUpPage from './components/SignUpPage.vue';\nimport MainPage from './components/MainPage.vue';\n\nVue.use(Router);\n\nconst routes = [\n    {\n        path: '/',\n        name: 'login',\n        component: LoginPage,\n    },\n    {\n        path: '/signup',\n        name: 'signup',\n        component: SignUpPage,\n    },\n    {\n        path: '/main',\n        name: 'main',\n        component: MainPage,\n        meta: { requiresAuth: true }, // To require authentication for MainPage\n    },\n];\n\nconst router = new Router({\n    routes,\n});\n\n// Global route guard to check if the user is authenticated\nrouter.beforeEach((to, from, next) => {\n    const token = localStorage.getItem('token');\n    if (to.matched.some(record => record.meta.requiresAuth) && !token) {\n        // Redirect to login if the route requires auth but the user is not authenticated\n        next({ name: 'login' });\n    } else {\n        next(); // Proceed to the route\n    }\n});\n\nexport default router;\n"],"mappings":";;AAAA,OAAOA,GAAG,MAAM,KAAK;AACrB,OAAOC,MAAM,MAAM,YAAY;AAC/B,OAAOC,SAAS,MAAM,4BAA4B;AAClD,OAAOC,UAAU,MAAM,6BAA6B;AACpD,OAAOC,QAAQ,MAAM,2BAA2B;AAEhDJ,GAAG,CAACK,GAAG,CAACJ,MAAM,CAAC;AAEf,MAAMK,MAAM,GAAG,CACX;EACIC,IAAI,EAAE,GAAG;EACTC,IAAI,EAAE,OAAO;EACbC,SAAS,EAAEP;AACf,CAAC,EACD;EACIK,IAAI,EAAE,SAAS;EACfC,IAAI,EAAE,QAAQ;EACdC,SAAS,EAAEN;AACf,CAAC,EACD;EACII,IAAI,EAAE,OAAO;EACbC,IAAI,EAAE,MAAM;EACZC,SAAS,EAAEL,QAAQ;EACnBM,IAAI,EAAE;IAAEC,YAAY,EAAE;EAAK,CAAC,CAAE;AAClC,CAAC,CACJ;AAED,MAAMC,MAAM,GAAG,IAAIX,MAAM,CAAC;EACtBK;AACJ,CAAC,CAAC;;AAEF;AACAM,MAAM,CAACC,UAAU,CAAC,CAACC,EAAE,EAAEC,IAAI,EAAEC,IAAI,KAAK;EAClC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIL,EAAE,CAACM,OAAO,CAACC,IAAI,CAACC,MAAM,IAAIA,MAAM,CAACZ,IAAI,CAACC,YAAY,CAAC,IAAI,CAACM,KAAK,EAAE;IAC/D;IACAD,IAAI,CAAC;MAAER,IAAI,EAAE;IAAQ,CAAC,CAAC;EAC3B,CAAC,MAAM;IACHQ,IAAI,CAAC,CAAC,CAAC,CAAC;EACZ;AACJ,CAAC,CAAC;AAEF,eAAeJ,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}